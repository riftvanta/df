"""Add enhanced security and performance features with defaults

Revision ID: b996c6b7b0c7
Revises: 
Create Date: 2025-07-16 20:28:22.868327

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'b996c6b7b0c7'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('projects',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('project_number', sa.String(length=50), nullable=False),
    sa.Column('model_type', sa.String(length=20), nullable=False),
    sa.Column('customer_country', sa.String(length=50), nullable=False),
    sa.Column('difficulty_level', sa.Integer(), nullable=False),
    sa.Column('estimated_hours', sa.Float(), nullable=False),
    sa.Column('assembly_start_date', sa.Date(), nullable=False),
    sa.Column('deadline', sa.Date(), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('requires_ref_first', sa.Boolean(), nullable=False),
    sa.Column('priority', sa.String(length=20), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint("model_type IN ('PAH', 'PPH', 'REF', 'APS', 'PSC')", name='valid_model_type'),
    sa.CheckConstraint("priority IN ('urgent', 'high', 'normal', 'low')", name='valid_priority'),
    sa.CheckConstraint("status IN ('unassigned', 'assigned', 'in_progress', 'on_hold', 'completed', 'cancelled')", name='valid_status'),
    sa.CheckConstraint('deadline >= assembly_start_date', name='valid_deadline'),
    sa.CheckConstraint('difficulty_level >= 1 AND difficulty_level <= 5', name='valid_difficulty'),
    sa.CheckConstraint('estimated_hours > 0', name='positive_estimated_hours'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('projects', schema=None) as batch_op:
        batch_op.create_index('idx_project_model_country', ['model_type', 'customer_country'], unique=False)
        batch_op.create_index('idx_project_priority_status', ['priority', 'status'], unique=False)
        batch_op.create_index('idx_project_status_deadline', ['status', 'deadline'], unique=False)
        batch_op.create_index(batch_op.f('ix_projects_assembly_start_date'), ['assembly_start_date'], unique=False)
        batch_op.create_index(batch_op.f('ix_projects_customer_country'), ['customer_country'], unique=False)
        batch_op.create_index(batch_op.f('ix_projects_deadline'), ['deadline'], unique=False)
        batch_op.create_index(batch_op.f('ix_projects_model_type'), ['model_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_projects_project_number'), ['project_number'], unique=True)
        batch_op.create_index(batch_op.f('ix_projects_status'), ['status'], unique=False)

    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('username', sa.String(length=80), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('role', sa.String(length=20), nullable=False),
    sa.Column('department_id', sa.Integer(), nullable=False),
    sa.Column('team_id', sa.Integer(), nullable=False),
    sa.Column('hours_per_week', sa.Float(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint("role IN ('admin', 'employee')", name='valid_role'),
    sa.CheckConstraint('department_id > 0', name='valid_department_id'),
    sa.CheckConstraint('hours_per_week > 0 AND hours_per_week <= 80', name='valid_hours_per_week'),
    sa.CheckConstraint('team_id > 0', name='valid_team_id'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index('idx_user_department_team', ['department_id', 'team_id'], unique=False)
        batch_op.create_index('idx_user_last_login', ['last_login'], unique=False)
        batch_op.create_index('idx_user_role_active', ['role', 'is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_department_id'), ['department_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_team_id'), ['team_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_username'), ['username'], unique=True)

    op.create_table('assignments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('hours_remaining', sa.Float(), nullable=False),
    sa.Column('original_hours', sa.Float(), nullable=False),
    sa.Column('hold_reason', sa.String(length=100), nullable=True),
    sa.Column('assigned_at', sa.DateTime(), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('last_status_change', sa.DateTime(), nullable=False),
    sa.CheckConstraint("status IN ('not_started', 'in_progress', 'on_hold', 'completed', 'cancelled')", name='valid_assignment_status'),
    sa.CheckConstraint('hours_remaining >= 0', name='non_negative_hours'),
    sa.CheckConstraint('original_hours > 0', name='positive_original_hours'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('project_id', 'user_id', name='unique_project_assignment')
    )
    with op.batch_alter_table('assignments', schema=None) as batch_op:
        batch_op.create_index('idx_assignment_project_status', ['project_id', 'status'], unique=False)
        batch_op.create_index('idx_assignment_status_user', ['status', 'user_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_assignments_project_id'), ['project_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_assignments_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('ix_assignments_user_id'), ['user_id'], unique=False)

    op.create_table('skills_matrix',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('machine_type', sa.String(length=20), nullable=False),
    sa.Column('skill_level', sa.String(length=20), nullable=False),
    sa.Column('efficiency_factor', sa.Float(), nullable=False),
    sa.Column('years_experience', sa.Integer(), nullable=False),
    sa.Column('last_updated', sa.DateTime(), nullable=False),
    sa.CheckConstraint("machine_type IN ('PAH', 'PPH', 'REF')", name='valid_machine_type'),
    sa.CheckConstraint("skill_level IN ('primary', 'secondary')", name='valid_skill_level'),
    sa.CheckConstraint('efficiency_factor > 0 AND efficiency_factor <= 2.0', name='valid_efficiency_factor'),
    sa.CheckConstraint('years_experience >= 0', name='non_negative_experience'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'machine_type', name='unique_user_skill')
    )
    with op.batch_alter_table('skills_matrix', schema=None) as batch_op:
        batch_op.create_index('idx_skills_machine_level', ['machine_type', 'skill_level'], unique=False)
        batch_op.create_index('idx_skills_user_machine', ['user_id', 'machine_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_skills_matrix_machine_type'), ['machine_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_skills_matrix_skill_level'), ['skill_level'], unique=False)
        batch_op.create_index(batch_op.f('ix_skills_matrix_user_id'), ['user_id'], unique=False)

    op.create_table('vacations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=False),
    sa.Column('approved', sa.Boolean(), nullable=False),
    sa.Column('vacation_type', sa.String(length=20), nullable=False),
    sa.Column('approved_by', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint("vacation_type IN ('annual', 'sick', 'personal', 'emergency')", name='valid_vacation_type'),
    sa.CheckConstraint('end_date >= start_date', name='valid_vacation_dates'),
    sa.ForeignKeyConstraint(['approved_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('vacations', schema=None) as batch_op:
        batch_op.create_index('idx_vacation_dates', ['start_date', 'end_date'], unique=False)
        batch_op.create_index('idx_vacation_user_approved', ['user_id', 'approved'], unique=False)
        batch_op.create_index(batch_op.f('ix_vacations_end_date'), ['end_date'], unique=False)
        batch_op.create_index(batch_op.f('ix_vacations_start_date'), ['start_date'], unique=False)
        batch_op.create_index(batch_op.f('ix_vacations_user_id'), ['user_id'], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('vacations', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_vacations_user_id'))
        batch_op.drop_index(batch_op.f('ix_vacations_start_date'))
        batch_op.drop_index(batch_op.f('ix_vacations_end_date'))
        batch_op.drop_index('idx_vacation_user_approved')
        batch_op.drop_index('idx_vacation_dates')

    op.drop_table('vacations')
    with op.batch_alter_table('skills_matrix', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_skills_matrix_user_id'))
        batch_op.drop_index(batch_op.f('ix_skills_matrix_skill_level'))
        batch_op.drop_index(batch_op.f('ix_skills_matrix_machine_type'))
        batch_op.drop_index('idx_skills_user_machine')
        batch_op.drop_index('idx_skills_machine_level')

    op.drop_table('skills_matrix')
    with op.batch_alter_table('assignments', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_assignments_user_id'))
        batch_op.drop_index(batch_op.f('ix_assignments_status'))
        batch_op.drop_index(batch_op.f('ix_assignments_project_id'))
        batch_op.drop_index('idx_assignment_status_user')
        batch_op.drop_index('idx_assignment_project_status')

    op.drop_table('assignments')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_username'))
        batch_op.drop_index(batch_op.f('ix_users_team_id'))
        batch_op.drop_index(batch_op.f('ix_users_email'))
        batch_op.drop_index(batch_op.f('ix_users_department_id'))
        batch_op.drop_index('idx_user_role_active')
        batch_op.drop_index('idx_user_last_login')
        batch_op.drop_index('idx_user_department_team')

    op.drop_table('users')
    with op.batch_alter_table('projects', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_projects_status'))
        batch_op.drop_index(batch_op.f('ix_projects_project_number'))
        batch_op.drop_index(batch_op.f('ix_projects_model_type'))
        batch_op.drop_index(batch_op.f('ix_projects_deadline'))
        batch_op.drop_index(batch_op.f('ix_projects_customer_country'))
        batch_op.drop_index(batch_op.f('ix_projects_assembly_start_date'))
        batch_op.drop_index('idx_project_status_deadline')
        batch_op.drop_index('idx_project_priority_status')
        batch_op.drop_index('idx_project_model_country')

    op.drop_table('projects')
    # ### end Alembic commands ###
